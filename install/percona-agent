#!/bin/sh
#
# percona-agent  This shell script takes care of starting and stopping
#                the percona-agent service.
#
# chkconfig: 2345 65 35
# description: Agent for Percona Cloud Tools
#
### BEGIN INIT INFO
# Provides:          percona-agent
# Required-Start:    $local_fs $network                                                                   
# Required-Stop:     $local_fs $network  
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop percona-agent
# Description:       Agent for Percona Cloud Tools
### END INIT INFO

export LANG=en_US

SERVICE="percona-agent"

# Agent needs to run as root to read MySQL slow log for Query Analytics (QAN).
# If not running QAN, a normal user will work.
USERNAME="root"

# Agent uses a single base directory for all its files and data.
BASEDIR="/usr/local/percona/$SERVICE"
if [ ! -d "$BASEDIR" ]; then
   mkdir -p "$BASEDIR" || exit 1
fi
chown "$USERNAME" "$BASEDIR" || exit 1

# Make sure the percona-agent binary exists.
CMD="/usr/local/percona/$SERVICE/bin/$SERVICE"
if [ ! -x "$CMD" ]; then
   echo "$CMD does not exist or is not executable. Check that $SERVICE" \
        "has been installed correctly." >&2
   exit 1
fi

# Agent may use a different log file, or no log file (online logging only),
# but we should capture any output, e.g. in case it crashes.
LOGFILE="$BASEDIR/$SERVICE.log"

# Agent does not manager its own PID file; system is expected to manager this.
PIDFILE="$BASEDIR/$SERVICE.pid"
pid=""

# Allow configuration overrides in /etc/sysconfig/$SERVICE
CONFIGFILE="/etc/sysconfig/$SERVICE"
[ -x $CONFIGFILE ] && . $CONFIGFILE
 
# Get the fully qualified path to the script
case $0 in
    /*)
        SCRIPT="$0"
        ;;
    *)
        PWD=`pwd`
        SCRIPT="$PWD/$0"
        ;;
esac
 
# Change spaces to ":" so the tokens can be parsed.
SCRIPT=`echo $SCRIPT | sed -e 's; ;:;g'`

# Get the real path to this script, resolving any symbolic links
TOKENS=`echo $SCRIPT | sed -e 's;/; ;g'`
REALPATH=
for C in $TOKENS; do
    REALPATH="$REALPATH/$C"
    while [ -h "$REALPATH" ] ; do
        LS="`ls -ld "$REALPATH"`"
        LINK="`expr "$LS" : '.*-> \(.*\)$'`"
        if expr "$LINK" : '/.*' > /dev/null; then
            REALPATH="$LINK"
        else
            REALPATH="`dirname "$REALPATH"`""/$LINK"
        fi
    done
done

# Change ":" chars back to spaces.
REALPATH=`echo $REALPATH | sed -e 's;:; ;g'`
 
# Change the current directory to the location of the script
cd "`dirname "$REALPATH"`"
  
# Resolve the location of the 'ps' command
PSEXE="/usr/bin/ps"
if [ ! -x $PSEXE ]
then
    PSEXE="/bin/ps"
    if [ ! -x $PSEXE ]
    then
        echo "Unable to locate 'ps'." >&2
        echo "Please report this with the location on your system." >&2
        exit 1
    fi
fi
 
# Build the nice clause
if [ "X$PRIORITY" = "X" ]
then
    CMDNICE=""
else
    CMDNICE="nice -$PRIORITY"
fi

getpid() {
    if [ -f $PIDFILE ]
    then
        if [ -r $PIDFILE ]
        then
            pid=`cat $PIDFILE`
            if [ "X$pid" != "X" ]
            then
                # Verify that a process with this pid is still running.
                pid=`$PSEXE -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
                if [ "X$pid" = "X" ]
                then
                    # This is a stale pid file.
                    rm -f $PIDFILE
                    echo "Removed stale pid file: $PIDFILE"
                fi
            fi
        else
            echo "Cannot read $PIDFILE."
            exit 1
        fi
    fi
}
 
testpid() {
    pid=`$PSEXE -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
    if [ "X$pid" = "X" ]
    then
        # Process is gone so remove the pid file.
        rm -f $PIDFILE
    fi
}

start() {
    echo "Starting $SERVICE..."
    getpid
    if [ "X$pid" = "X" ]
    then
        # Run agent in background; it does not daemonize itself. 
        $CMD -basedir "$BASEDIR" >> "$LOGFILE" 2>&1 &

        # Process is started in background so $? does not have its exit status.
        # Instead, check that it's running by trying to get its PID.
        getpid
         if [ "X$pid" = "X" ]; then
            echo "Fail.  Check $LOGFILE for details."
            exit 1
        else
            echo $! > "$PIDFILE"
            echo "OK"
        fi
    else
        echo "$SERVICE is already running."
        exit 1
    fi
}

stop() {
    echo "Stopping $SERVICE..."
    getpid
    if [ "X$pid" = "X" ]
    then
        echo "$SERVICE was not running."
    else
         # Running so try to stop it.
        su --command="kill $pid" $USERNAME
        if [ $? -ne 0 ]
        then
            # An explanation for the failure should have been given
            echo "Unable to stop $SERVICE."
            exit 1
        fi
 
        #  Loop until it does.
        savepid=$pid
        CNT=0
        TOTCNT=0
        while [ "X$pid" != "X" ]
        do
            # Loop for up to 5 minutes
            if [ "$TOTCNT" -lt "300" ]
            then
                if [ "$CNT" -lt "5" ]
                then
                    CNT=`expr $CNT + 1`
                else
                    echo "Waiting for $SERVICE to exit..."
                    CNT=0
                fi
                TOTCNT=`expr $TOTCNT + 1`
                testpid
            else
                pid=
            fi
        done
 
        pid=$savepid
        testpid
        if [ "X$pid" != "X" ]
        then
            echo "Timed out waiting for $SERVICE to exit."
            echo "  Attempting a forced exit..."
            kill -9 $pid
        fi
 
        pid=$savepid
        testpid
        if [ "X$pid" != "X" ]
        then
            echo "Failed to stop $SERVICE."
            exit 1
        else
            echo "Stopped $SERVICE."
        fi
    fi
}
 
status() {
    getpid
    if [ "X$pid" = "X" ]
    then
        echo "$SERVICE is not running."
        exit 1
    else
        echo "$SERVICE is running ($pid)."
        exit 0
    fi
}
 
case "$1" in
    'start')
        start
        ;;
    'stop')
        stop
        ;;
    'restart')
        stop
        start
        ;;
    'status')
        status
        ;;
    *)
        echo "Usage: $0 start|stop|restart|status"
        exit 1
        ;;
esac
 
exit 0
